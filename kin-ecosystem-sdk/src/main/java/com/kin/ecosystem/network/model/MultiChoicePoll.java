/*
 * Kin Ecosystem
 * Apis for client to server interaction
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.kin.ecosystem.network.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


/**
 * MultiChoicePoll
 */
public class MultiChoicePoll {

    /**
   * Gets or Sets contentType
   */
  @JsonAdapter(ContentTypeEnum.Adapter.class)
  public enum ContentTypeEnum {
    
    MULTICHOICEPOLL("MultiChoicePoll");

    private String value;

    ContentTypeEnum(String value) {
      this.value = value;
    }
    
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    
    public static ContentTypeEnum fromValue(String text) {
      for (ContentTypeEnum b : ContentTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    
    public static class Adapter extends TypeAdapter<ContentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ContentTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }
  
  @SerializedName("content_type")
  private ContentTypeEnum contentType = null;
  @SerializedName("questions")
  private List<Question> questions = null;
  
  public MultiChoicePoll contentType(ContentTypeEnum contentType) {
    this.contentType = contentType;
    return this;
  }

  
  /**
  * Get contentType
  * @return contentType
  **/
  public ContentTypeEnum getContentType() {
    return contentType;
  }
  public void setContentType(ContentTypeEnum contentType) {
    this.contentType = contentType;
  }
  
  public MultiChoicePoll questions(List<Question> questions) {
    this.questions = questions;
    return this;
  }

  public MultiChoicePoll addQuestionsItem(Question questionsItem) {
    
    if (this.questions == null) {
      this.questions = new ArrayList<Question>();
    }
    
    this.questions.add(questionsItem);
    return this;
  }
  
  /**
  * Get questions
  * @return questions
  **/
  public List<Question> getQuestions() {
    return questions;
  }
  public void setQuestions(List<Question> questions) {
    this.questions = questions;
  }
  
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MultiChoicePoll multiChoicePoll = (MultiChoicePoll) o;
    return Objects.equals(this.contentType, multiChoicePoll.contentType) &&
        Objects.equals(this.questions, multiChoicePoll.questions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentType, questions);
  }
  
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MultiChoicePoll {\n");
    
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    questions: ").append(toIndentedString(questions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  
}



